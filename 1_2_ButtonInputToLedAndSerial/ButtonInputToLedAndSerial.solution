/*
 * Lessons with 2 buttons 2 LEDs
 * Solution
 *
 * Thema:
 * - if / else Anweisung, logisches invertieren.
 * - Statische Variable.
 *
 *  Copyright 2019 Armin Joachimsmeyer
 *  This code is released under GPLv3 license.
 *
 *  This file is part of Arduino-Lessons-for-School https://github.com/ArminJo/Arduino-Lessons-for-School.
 *
 *  Arduino-Lessons-for-School is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 */

/*
 * WICHTIGE TASTENKOMBINATIONEN
 * Formatieren: "strg" + "F"
 * Definition finden: "F3"
 * Autocompletion: "strg" + Leertaste
 * Verwendung suchen: "strg" + "G"
 *
 * Vergleichsoperatoren sind: "==", "!=", ">=", "<=".
 * Bedingungen werden verknüpft mit: "and" / "&&" oder "or" / "||"  und mit "not" / "!" negiert.
 */

#include <Arduino.h>
#include "Breadboard.h"

#define VERSION_EXAMPLE "1.0"

#define    DELAY_LOOP            100

// Variablen für Zusatzaufgabe
int sOldRightButtonValue;
int sOldLeftButtonValue;

// The loop routine runs over and over again forever
void loop() {
    int tNewRightButtonValue = digitalRead(PIN_RIGHT_BUTTON);
    int tNewLeftButtonValue = digitalRead(PIN_LEFT_BUTTON);

    /*
     * Aufgabe 1. - if / else Anweisung, Logisches invertieren.
     *
     * Lasse die rechte LED leuchten, solange der rechte Button gedrückt ist.
     * Lasse die linke LED leuchten, solange der linke Button gedrückt ist.
     * LOW ist 0 / false, HIGH ist 1 / true
     */
    if (tNewRightButtonValue == 0) {
        digitalWrite(PIN_GREEN_LED, HIGH);
    } else {
        digitalWrite(PIN_GREEN_LED, LOW);
    }

    // Etwas eleganter aber dasselbe, denn logische Werte werden mit "!" negiert.
    // The simple version, using bool values and negation operator !
    digitalWrite(PIN_RED_LED, !digitalRead(PIN_LEFT_BUTTON));

    /*
     * Aufgabe 2. - Statische Variable.
     *
     * Rufe Serial.print nur dann auf, wenn der Zustand des Buttons sich geändert hat.
     * Vergleiche dazu aktuellen Wert mit altem Wert ( z.B. sOldRightButtonValue).
     */
    if (sOldRightButtonValue != tNewRightButtonValue) {
        sOldRightButtonValue = tNewRightButtonValue; // Do this as first statement for readability
        Serial.print("RightButton is ");
        Serial.println(tNewRightButtonValue);
    }
    if (sOldLeftButtonValue != tNewLeftButtonValue) {
        sOldLeftButtonValue = tNewLeftButtonValue;
        Serial.print("LeftButton is ");
        Serial.println(tNewLeftButtonValue);
    }

    delay(DELAY_LOOP);
}

// The setup function is called once at startup of the program
void setup() {
    // Start serial output
    Serial.begin(115200);
    // Just to know which program is running on my Arduino
    Serial.println(F("START " __FILE__ "\r\nVersion " VERSION_EXAMPLE " from " __DATE__));

    initBreadboardPins();

    // Play 2200 Hz.
    tone(PIN_BUZZER, 2200);

    // Let LED blink for 600 ms
    digitalWrite(PIN_RED_LED, HIGH);
    digitalWrite(PIN_GREEN_LED, HIGH);
    delay(600);

    // Stop tone
    noTone(PIN_BUZZER);
    digitalWrite(PIN_RED_LED, LOW);
    digitalWrite(PIN_GREEN_LED, LOW);

    sOldRightButtonValue = digitalRead(PIN_RIGHT_BUTTON);
    sOldLeftButtonValue = digitalRead(PIN_LEFT_BUTTON);
}

